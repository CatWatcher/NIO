package nio;

public class AboutNio {
}

// используется для ввода и вывода
//
//
/*
Channel
Buffer
Selector
Charset

from java 7
добавлен пакет files для работы с файловой системой
- Path and Files

итак, Path - путь и все его методы используются для интерфейсов файловых систем
(папки и все такое), состоит из нескольких частей, каждый каталог - это часть объекта
имя файла - последний элемент

указание пути:
Path path = Paths.get("/catalog1/catalog2/file.txt");
Path path2 = Paths.get(URI.create("file:///catalog1/catalog2/file.txt"));

path.getNameCount(); - возвращает кол-во элементов пути
path.getName(index); - элемент пути по индексу
path.normalize(); - убирает из пути точки (убирает непоказываемые папки, нужно быть аккуратным)
есть шанс проигнорировать часть пути и не получить доступ к файлу
посмотреть остальные методы

посмотреть методы Files - работа с файловой системой

Buffer:
- нужен для того чтобы из них читать в канал и из канала в буфер
- у нового буфера позиция всегда на нуле
- емкость буфера всегда одинакова (capacity)
- лимит для свежего буфера равен емкости, меняется во время работы программы
  - предел, после которого нет смысла читать или записывать данные
- при записи и чтении используется метод hasRemind (возвращает тру или фолс)
  - remaining - разница между текущей позицией и лимитом
- flip(); - лимит в позицию, а позицию в ноль
  - подготавливает буфер для чтения
- позиция при чтении смещается так же, как и при записи
- rewind - готовит буфер для повторного чтения
  - перемещает позицию на 0
- clear - готовит буфер для новой записи

// посмотреть реализации буфера (для примитивов и прочего)

Channels - как стримы
 - могут работать параллельно
 - используется как для записи, так и для чтения
// посмотреть реализации каналов
  FileChannel - канал между программой и файлом
  DatagramChannel - для передачи данных по udp протоколу
  SocketChannel - для передачи по tcp протоколу
  ServerSocketChannel - позволяет слушать входящие tcp соединения
    - для каждого соединения создается SocketChannel
FileChannel можем получить из outputStream, inputStream и randomAccessFile методом  getChannel

Selector - для того чтобы не создавать много потоков
  - нужен для создания нескольких каналов в одном потоке
  - если слишком много потоков и все виснет юзаем селектор
  - следит за каналами, реагирует на действия в канале
События:
  - Connect - SelectionKey.OP_CONNECT - по каналу идет подключение (новый клиент)
  - Accept - SelectionKey.OP_ACCEPT - сервер поддержал соединение
  - Read - SelectionKey.OP_READ - канал готов для чтения
  - Write - SelectionKey.OP_WRITE - канал готов для отправки данных в канал

Определение что за событие:
  - с помощью флагов:
    - key.isAcceptable(); - событие accept
    - key.isReadable(); - событие read  и т.д.

Если канал закрывается, это необходимо обработать (т.е удалить канал)!


 */